# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: 'Build'
  displayName: 'Build and publish application'
  jobs:
  - job: build_and_publish
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build the project
      inputs:
        command: 'build'
        arguments: '--configuration release'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: '**/Ana.ToDo.FunctionApp.UnitTests.csproj'
        arguments: '--configuration release --collect "Code coverage"'
        publishTestResults: true
           
    - task: DotNetCoreCLI@2
      displayName: Publish the project
      inputs:
        command: 'publish'
        projects: '**/Ana.ToDo.FunctionApp.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration release --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Test'
  displayName: 'Deploy to the TEST environment'
  dependsOn: Build
  jobs:
  - job: deploy_to_test
    pool:
        vmImage: 'windows-2019'
    variables:
        - group: Release
    steps:
    - task: CmdLine@2
      inputs:
        script: |
          echo files:
          cd $(System.ArtifactsDirectory)
          ls
    - task: CmdLine@2
      inputs:
        script: |
          echo files:
          cd $(Build.ArtifactStagingDirectory)
          ls
    - task: AzureCLI@2
      displayName: Create a Resource Group
      inputs:
        azureSubscription: 'ToDoConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create -l eastus -n rg-todo-app-api'

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: Deploy Infrustructure from ARM Template 
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'ToDoConnection'
        subscriptionId: '36d3687c-f042-4575-a046-b95c67efc8ca'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'rg-todo-app-api'
        location: 'East US 2'
        templateLocation: 'Linked artifact'
        csmFile: 'ARM Templates/arm_rg.json'
        csmParametersFile: 'ARM Templates/armparameters.json'
        overrideParameters: '-myConnectionString "$(MyConnectionString)"'
        deploymentMode: 'Incremental'

    - task: AzureFunctionApp@1
      inputs:
        azureSubscription: 'ToDoConnection'
        appType: 'functionApp'
        appName: 'toDoFunctionAppAna'
        package: 'D:\a\1\a\Ana.ToDo.FunctionApp\**\*.zip'
        deploymentMethod: 'auto'
        
    - task: SqlAzureDacpacDeployment@1
      displayName: Deploy DB schema
      inputs:
        azureSubscription: 'ToDoConnection'
        AuthenticationType: 'server'
        ServerName: 'todoappservernew.database.windows.net'
        DatabaseName: 'todobd'
        SqlUsername: 'ana'
        SqlPassword: '007Pus007'
        deployType: 'SqlTask'
        SqlFile: 'src/Ana.ToDo.Database/toDoObjectsDB.sql'
        IpDetectionMethod: 'AutoDetect'

    - task: DotNetCoreCLI@2
      displayName: Run Data Base Tests
      inputs:
        command: 'test'
        projects: '**/Ana.ToDo.FunctionApp.IntegrationTests.csproj'
        arguments: '--configuration release --filter "ClassName=Ana.Todo.FunctionApp.IntegrationTests.DBTests"'

    - task: DotNetCoreCLI@2
      displayName: Run API Tests
      inputs:
        command: 'test'
        projects: '**/Ana.ToDo.FunctionApp.IntegrationTests.csproj'
        arguments: '--configuration release --filter "ClassName=Ana.Todo.FunctionApp.IntegrationTests.APITests.ToDoItemTests"'