# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: 'Build'
  displayName: 'Build and publish application'
  jobs:
  - job: build_and_publish
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build the project
      inputs:
        command: 'build'
        arguments: '--configuration release'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: '**/Ana.ToDo.FunctionApp.UnitTests.csproj'
        arguments: '--configuration release --collect "Code coverage"'
        publishTestResults: true
           
    - task: DotNetCoreCLI@2
      displayName: Publish the project
      inputs:
        command: 'publish'
        projects: '**/Ana.ToDo.FunctionApp.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration release --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: CopyFiles@2
      inputs:
        SourceFolder: 'ARM Templates'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'src/Ana.ToDo.Database'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Test'
  displayName: 'Deploy to TEST environment'
  dependsOn: Build
  jobs:
  - deployment: deploy_to_test
    pool:
      vmImage: 'windows-2019'
    environment: ApprovalNotRequired
    variables:
        - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            patterns: '**'
          - template: deploymentTemplate.yml
            parameters: 
              Env: test

  - job: data_base_tests
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: Run Data Base Tests
      inputs:
        command: 'test'
        projects: '**/Ana.ToDo.FunctionApp.IntegrationTests.csproj'
        arguments: '--configuration release --filter "ClassName=Ana.Todo.FunctionApp.IntegrationTests.DBTests"'
  
  - job: integration_tests
    steps:
    - task: DotNetCoreCLI@2
      displayName: Run API Tests
      inputs:
        command: 'test'
        projects: '**/Ana.ToDo.FunctionApp.IntegrationTests.csproj'
        arguments: '--configuration release --filter "ClassName=Ana.Todo.FunctionApp.IntegrationTests.APITests.ToDoItemTests"'
    
    - task: AzureCLI@2
      displayName: Drop Test Environment 
      inputs:
        azureSubscription: 'ToDoConnection'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group show -n rg-todoapp-test'

- stage: 'Stage'
  displayName: 'Deploy to STAGE environment'
  dependsOn: Test
  jobs:
  - deployment: deploy_to_stage
    pool:
      vmImage: 'windows-2019'
    environment: ApprovalNotRequired
    variables:
        - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            patterns: '**'
          - template: deploymentTemplate.yml
            parameters: 
              Env: stage

- stage: 'Production'
  displayName: 'Deploy to PROD environment'
  dependsOn: Stage
  jobs:
  - deployment: deploy_to_prod
    pool:
      vmImage: 'windows-2019'
    environment: ApprovarReqired
    variables:
        - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            patterns: '**'
          - template: deploymentTemplate.yml
            parameters: 
              Env: prod